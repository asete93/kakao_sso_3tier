plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.0.3'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.camel'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// libs
	implementation fileTree(dir: 'libs', includes: ['*.jar'])

	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Swagger springdoc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// MySQL, JPA, hibernate Validator
	runtimeOnly 'mysql:mysql-connector-java:8.0.32'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'

	// lombok
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'

	// API Call
	implementation 'org.apache.httpcomponents:httpcore:4.4.13'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'

	// Email
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'org.json:json:20210307'

	// BCrypt
	implementation 'org.mindrot:jbcrypt:0.4'
	
	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// javax.servlet
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	// BLob
	implementation 'javax.persistence:javax.persistence-api:2.2'

	// Database Schema Manager
	implementation 'org.liquibase:liquibase-core'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootRun {
	def proxyAddr = System.getenv("PROXY_ADDR")
	if (proxyAddr) {
		def host = proxyAddr.replace("http://", "").split(":")[0]
        def port = proxyAddr.replace("http://", "").split(":")[1]
        
        systemProperty 'http.proxyHost', host
        systemProperty 'http.proxyPort', port
        systemProperty 'https.proxyHost', host
        systemProperty 'https.proxyPort', port

		println "Using proxy: ${host}:${port}"
	}

    systemProperty 'server.port', '8083'
	systemProperty 'spring.devtools.restart.enabled', 'false' // 선택 사항: Hot swapping 비활성화
    systemProperty 'spring.output.ansi.enabled', 'ALWAYS'
    jvmArgs = [
        '-Xdebug',
        '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
    ]
}